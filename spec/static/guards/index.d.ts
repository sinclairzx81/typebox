import { TAny, TArray, TBoolean, TConstructor, TFunction, TInteger, TLiteral, TNull, TNumber, TObject, TPromise, TRecord, TRef, TSchema, TSelf, TString, TTuple, TUint8Array, TUndefined, TUnion, TUnknown, TVoid } from '../typebox';
export declare function isTSchema(value: object): value is TSchema;
declare type TypeGuard<T extends TSchema> = (value: object) => value is T;
export declare const isTAny: TypeGuard<TAny>;
export declare const isTArray: TypeGuard<TArray<TSchema>>;
export declare const isTBoolean: TypeGuard<TBoolean>;
export declare const isTConstructor: TypeGuard<TConstructor<TSchema[], TSchema>>;
export declare const isTFunction: TypeGuard<TFunction<TSchema[], TSchema>>;
export declare const isTInteger: TypeGuard<TInteger>;
export declare const isTLiteral: TypeGuard<TLiteral<import("../typebox").TLiteralValue>>;
export declare const isTNull: TypeGuard<TNull>;
export declare const isTNumber: TypeGuard<TNumber>;
export declare const isTObject: TypeGuard<TObject<import("../typebox").TProperties>>;
export declare const isTPromise: TypeGuard<TPromise<TSchema>>;
export declare const isTRecord: TypeGuard<TRecord<import("../typebox").TRecordKey, TSchema>>;
export declare const isTSelf: TypeGuard<TSelf>;
export declare const isTRef: TypeGuard<TRef<TSchema>>;
export declare const isTString: TypeGuard<TString>;
export declare const isTTuple: TypeGuard<TTuple<TSchema[]>>;
export declare const isTUndefined: TypeGuard<TUndefined>;
export declare const isTUnion: TypeGuard<TUnion<TSchema[]>>;
export declare const isTUint8Array: TypeGuard<TUint8Array>;
export declare const isTUnknown: TypeGuard<TUnknown>;
export declare const isTVoid: TypeGuard<TVoid>;
export {};
