import { Compile } from 'typebox/compile'
import System from 'typebox/system'
import Format from 'typebox/format'
import Schema from 'typebox/schema'
import Value from 'typebox/value'
import Type from 'typebox'

// ------------------------------------------------------------------
// Settings
// ------------------------------------------------------------------
System.Settings.Set({ enumerableKind: false })


// ------------------------------------------------------------------
// Type
// ------------------------------------------------------------------
const T = Type.Object({
  x: Type.Number(),
  y: Type.Number(),
  z: Type.Number()
})

// ------------------------------------------------------------------
// Script
// ------------------------------------------------------------------
const S = Type.Script({ T }, `{
  [K in keyof T]: T[K] | null
}`)

// ------------------------------------------------------------------
// Infer
// ------------------------------------------------------------------
type T = Type.Static<typeof T>
type S = Type.Static<typeof S>

// ------------------------------------------------------------------
// Parse
// ------------------------------------------------------------------

const R = Value.Parse(T, { x: 1, y: 2, z: 3 })

// ------------------------------------------------------------------
// Compile
// ------------------------------------------------------------------

const C = Compile(S)

const X = C.Parse({ x: 1, y: 2, z: 3 })

// ------------------------------------------------------------------
// Format
// ------------------------------------------------------------------

const E = Format.IsEmail('user@domain.com')

// ------------------------------------------------------------------
// Schema
// ------------------------------------------------------------------

const D = Schema.Check({ type: 'string' }, 'hello')